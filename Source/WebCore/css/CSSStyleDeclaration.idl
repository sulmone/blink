/*
 * Copyright (C) 2006, 2007, 2009 Apple Inc. All rights reserved.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// Introduced in DOM Level 2:
[
    CustomNamedSetter,
    CustomNamedGetter,
    IndexedGetter,
    CustomEnumerateProperty,
    DependentLifetime,
    SkipVTableValidation
] interface CSSStyleDeclaration {
             [TreatReturnedNullStringAs=Null, TreatNullAs=NullString, SetterRaisesException] attribute DOMString        cssText;

    [TreatReturnedNullStringAs=Null] DOMString          getPropertyValue([Optional=DefaultIsUndefined] DOMString propertyName);
    CSSValue           getPropertyCSSValue([Optional=DefaultIsUndefined] DOMString propertyName);
    [TreatReturnedNullStringAs=Null, RaisesException] DOMString          removeProperty([Optional=DefaultIsUndefined] DOMString propertyName);
    [TreatReturnedNullStringAs=Null] DOMString          getPropertyPriority([Optional=DefaultIsUndefined] DOMString propertyName);
     [RaisesException] void setProperty([Optional=DefaultIsUndefined] DOMString propertyName, 
                                    [TreatNullAs=NullString,Optional=DefaultIsUndefined] DOMString value, 
                                    [Optional=DefaultIsUndefined] DOMString priority);

    readonly attribute unsigned long    length;
    DOMString          item([Optional=DefaultIsUndefined] unsigned long index);
    readonly attribute CSSRule          parentRule;

    // Extensions
    [TreatReturnedNullStringAs=Null] DOMString          getPropertyShorthand([Optional=DefaultIsUndefined] DOMString propertyName);
    boolean            isPropertyImplicit([Optional=DefaultIsUndefined] DOMString propertyName);
};

